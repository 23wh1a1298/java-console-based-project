import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Define Category Enum
enum Category {
    MAIN, SIDE, DRINK, DESSERT;
}

// Class to represent a menu item
class MenuItem {
    private String name;
    private double price;
    private Category category;

    public MenuItem(String name, double price, Category category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public Category getCategory() {
        return category;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    @Override
    public String toString() {
        return name + " - ₹" + String.format("%.2f", price);
    }
}

// Class to manage the restaurant menu
class Menu {
    private List<MenuItem> items;

    public Menu() {
        items = new ArrayList<>();
        // Adding some items to the menu with categories
        items.add(new MenuItem("Pizza", 12.99, Category.MAIN));
        items.add(new MenuItem("Burger", 8.99, Category.MAIN));
        items.add(new MenuItem("Ice Cream", 4.99, Category.DESSERT));
        items.add(new MenuItem("Soup", 5.99, Category.SIDE));
        items.add(new MenuItem("Coffee", 2.99, Category.DRINK));
    }

    public List<MenuItem> getItems() {
        return items;
    }

    public void displayMenu() {
        System.out.println("\nMenu:");
        for (Category category : Category.values()) {
            System.out.println("\n" + category + ":");
            for (MenuItem item : items) {
                if (item.getCategory() == category) {
                    System.out.println("- " + item);
                }
            }
        }
    }

    public MenuItem findItemByName(String name) {
        for (MenuItem item : items) {
            if (item.getName().equalsIgnoreCase(name)) {
                return item;
            }
        }
        return null;
    }

    public void addItem(MenuItem item) {
        items.add(item);
        System.out.println(item.getName() + " has been added to the menu.");
    }

    public void removeItem(String itemName) {
        MenuItem item = findItemByName(itemName);
        if (item != null) {
            items.remove(item);
            System.out.println(itemName + " has been removed from the menu.");
        } else {
            System.out.println("Item not found.");
        }
    }

    public void updateItemPrice(String itemName, double newPrice) {
        MenuItem item = findItemByName(itemName);
        if (item != null) {
            item.setPrice(newPrice);
            System.out.println("Price of " + itemName + " updated to ₹" + String.format("%.2f", newPrice));
        } else {
            System.out.println("Item not found.");
        }
    }
}

// Class to handle orders and billing
class Order {
    private List<MenuItem> orderedItems;

    public Order() {
        orderedItems = new ArrayList<>();
    }

    public void addItem(MenuItem item) {
        orderedItems.add(item);
    }

    public void removeItem(MenuItem item) {
        orderedItems.remove(item);
    }

    public double calculateTotal() {
        return orderedItems.stream().mapToDouble(MenuItem::getPrice).sum();
    }

    public void displayOrder() {
        System.out.println("\nYour Order:");
        for (MenuItem item : orderedItems) {
            System.out.println("- " + item);
        }
        System.out.printf("\nTotal Amount: ₹%.2f%n", calculateTotal());
    }
}

// Main class for the restaurant application
public class Main {
    private static final Scanner scanner = new Scanner(System.in);
    private static Menu menu = new Menu();
    private static Order order = new Order();

    public static void main(String[] args) {
        // Admin functionality
        System.out.print("Are you an admin? (yes/no): ");
        String adminResponse = scanner.nextLine().trim().toLowerCase();

        if (adminResponse.equals("yes")) {
            while (true) {
                System.out.println("\nAdmin Menu:");
                System.out.println("1. Add item");
                System.out.println("2. Remove item");
                System.out.println("3. Update item price");
                System.out.println("4. Exit admin mode");
                System.out.print("Enter your choice: ");
                int adminChoice = validateIntegerInput(1, 4);

                if (adminChoice == 1) {
                    System.out.print("\nEnter the name of the item: ");
                    String name = scanner.nextLine().trim();
                    System.out.print("Enter the price of the item: ₹");
                    double price = validateDoubleInput();
                    System.out.print("Enter the category (MAIN/SIDE/DRINK/DESSERT): ");
                    String category = scanner.nextLine().trim().toUpperCase();
                    try {
                        menu.addItem(new MenuItem(name, price, Category.valueOf(category)));
                    } catch (IllegalArgumentException e) {
                        System.out.println("Invalid category. Please try again.");
                    }
                } else if (adminChoice == 2) {
                    System.out.print("\nEnter the name of the item to remove: ");
                    String name = scanner.nextLine().trim();
                    menu.removeItem(name);
                } else if (adminChoice == 3) {
                    System.out.print("\nEnter the name of the item to update the price: ");
                    String name = scanner.nextLine().trim();
                    System.out.print("Enter the new price of the item: ₹");
                    double newPrice = validateDoubleInput();
                    menu.updateItemPrice(name, newPrice);
                } else if (adminChoice == 4) {
                    break;
                }
            }
        }

        // Customer order flow
        System.out.print("\nEnter your table number: ");
        int tableNumber = validateIntegerInput(1, Integer.MAX_VALUE);

        System.out.print("\nEnter your mobile number (10 digits): ");
        String phoneNumber = validatePhoneNumber();

        System.out.print("\nEnter your email address: ");
        String emailAddress = validateEmail();

        while (true) {
            menu.displayMenu();
            System.out.print("\nEnter the name of the item to add to your order (or 'done' to finish): ");
            String itemName = scanner.nextLine().trim();

            if (itemName.equalsIgnoreCase("done")) {
                break;
            }

            MenuItem selectedItem = menu.findItemByName(itemName);
            if (selectedItem != null) {
                order.addItem(selectedItem);
                System.out.println(selectedItem.getName() + " added to your order.");
            } else {
                System.out.println("Item not found. Please try again.");
            }
        }

        while (true) {
            order.displayOrder();

            System.out.print("\nAre you okay with the items in your order? (yes/no): ");
            String confirmation = scanner.nextLine().trim().toLowerCase();

            if (confirmation.equals("yes")) {
                break;
            } else if (confirmation.equals("no")) {
                System.out.println("\nWhat would you like to do?");
                System.out.println("1. Add an item");
                System.out.println("2. Remove an item");
                System.out.print("Enter your choice: ");
                int choice = validateIntegerInput(1, 2);

                if (choice == 1) {
                    menu.displayMenu();
                    System.out.print("\nEnter the name of the item to add: ");
                    String itemName = scanner.nextLine().trim();
                    MenuItem selectedItem = menu.findItemByName(itemName);
                    if (selectedItem != null) {
                        order.addItem(selectedItem);
                        System.out.println(selectedItem.getName() + " added to your order.");
                    } else {
                        System.out.println("Item not found. Please try again.");
                    }
                } else if (choice == 2) {
                    System.out.print("\nEnter the name of the item to remove: ");
                    String itemName = scanner.nextLine().trim();
                    MenuItem selectedItem = menu.findItemByName(itemName);
                    if (selectedItem != null) {
                        order.removeItem(selectedItem);
                        System.out.println(selectedItem.getName() + " removed from your order.");
                    } else {
                        System.out.println("Item not found. Please try again.");
                    }
                }
            } else {
                System.out.println("Invalid input. Please enter 'yes' or 'no'.");
            }
        }

        order.displayOrder();
        System.out.println("\nSelect payment method:");
        System.out.println("1. PhonePe");
        System.out.println("2. Cash");
        System.out.print("\nEnter your choice: ");
        int paymentChoice = validateIntegerInput(1, 2);

        if (paymentChoice == 1 || paymentChoice == 2) {
            System.out.printf("\nTotal Amount Paid: ₹%.2f%n", order.calculateTotal());
            System.out.println("\nPayment successful! Thank you for your order at table " + tableNumber + ".");
        } else {
            System.out.println("\nInvalid choice. Payment failed.");
        }

        scanner.close();
    }

    private static int validateIntegerInput(int min, int max) {
        while (true) {
            try {
                int input = Integer.parseInt(scanner.nextLine().trim());
                if (input >= min && input <= max) {
                    return input;
                } else {
                    System.out.print("Invalid input. Enter a number between " + min + " and " + max + ": ");
                }
            } catch (NumberFormatException e) {
                System.out.print("Invalid input. Enter a valid number: ");
            }
        }
    }

    private static double validateDoubleInput() {
        while (true) {
            try {
                return Double.parseDouble(scanner.nextLine().trim());
            } catch (NumberFormatException e) {
                System.out.print("Invalid input. Enter a valid number: ");
            }
        }
    }

    private static String validatePhoneNumber() {
        while (true) {
            String input = scanner.nextLine().trim();
            if (input.matches("\\d{10}")) {
                return input;
            } else {
                System.out.print("Invalid phone number. Enter a 10-digit number: ");
            }
        }
    }

    private static String validateEmail() {
        while (true) {
            String input = scanner.nextLine().trim();
            if (input.matches("^[\\w.%+-]+@[\\w.-]+\\.[a-zA-Z]{2,6}$")) {
                return input;
            } else {
                System.out.print("Invalid email address. Enter a valid email: ");
            }
        }
    }
}
